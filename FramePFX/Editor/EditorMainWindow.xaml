<v:WindowEx x:Class="FramePFX.Editor.EditorMainWindow"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
            xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
            xmlns:converters="clr-namespace:FramePFX.Converters"
            xmlns:acs="clr-namespace:FramePFX.AdvancedContextService"
            xmlns:s="clr-namespace:FramePFX.Shortcuts"
            xmlns:sb="clr-namespace:FramePFX.Shortcuts.Bindings"
            xmlns:c="clr-namespace:FramePFX.Editor.Timeline.Controls"
            xmlns:wpf="clr-namespace:SkiaSharp.Views.WPF;assembly=SkiaSharp.Views.WPF"
            xmlns:v="clr-namespace:FramePFX.Views"
            xmlns:timeline="clr-namespace:FramePFX.Core.Editor.ViewModels.Timeline;assembly=FramePFX.Core"
            xmlns:viewModels="clr-namespace:FramePFX.Core.Editor.ViewModels;assembly=FramePFX.Core"
            xmlns:helpers="clr-namespace:FramePFX.Controls.Helpers"
            xmlns:cc="clr-namespace:FramePFX.Controls"
            xmlns:rm="clr-namespace:FramePFX.Core.Editor.ResourceManaging;assembly=FramePFX.Core"
            xmlns:nn="clr-namespace:FramePFX.Notifications"
            xmlns:types="clr-namespace:FramePFX.Core.Notifications.Types;assembly=FramePFX.Core"
            xmlns:n="clr-namespace:FramePFX.Core.Notifications;assembly=FramePFX.Core"
            xmlns:editor="clr-namespace:FramePFX.Editor"
            xmlns:vm1="clr-namespace:FramePFX.Core.Editor.ResourceManaging.ViewModels;assembly=FramePFX.Core"
            xmlns:ui="clr-namespace:FramePFX.ResourceManaging"
            xmlns:rc="clr-namespace:FramePFX.Core.Editor.ResourceManaging.ViewModels.Resources;assembly=FramePFX.Core"
            xmlns:notifications="clr-namespace:FramePFX.Core.Editor.Notifications;assembly=FramePFX.Core"
            xmlns:savingProject="clr-namespace:FramePFX.Editor.Notifications.SavingProject"
            xmlns:framePfx="clr-namespace:FramePFX"
            xmlns:history="clr-namespace:FramePFX.Core.History;assembly=FramePFX.Core"
            mc:Ignorable="d"
            d:DataContext="{d:DesignInstance viewModels:VideoEditorViewModel}"
            Width="1408" Height="792"
            Style="{StaticResource CustomWindowStyle}"
            Background="{DynamicResource WindowBackground}"
            BorderBrush="{DynamicResource ABrush.Tone6.Border.Static}"
            s:UIFocusGroup.IsGlobalShortcutFocusTarget="True"
            s:UIFocusGroup.FocusGroupPath="Application/Editor">
    <Window.Resources>
        <SolidColorBrush x:Key="WindowBackground" Color="{DynamicResource AColour.Tone2.Background.Static}"/>
        <editor:EditorTitleConverter x:Key="TitleConverter" DefaultTitle="Bootleg Sony Vegas"/>
        <converters:NullToBoolConverter x:Key="NullToDisabledConverter" NullValue="False" NonNullValue="True"/>
        <Style TargetType="{x:Type Slider}">
            <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false" />
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="Foreground" Value="{DynamicResource SliderThumb.Static.Foreground}" />
            <Setter Property="Template" Value="{StaticResource SliderHorizontal}" />
            <Style.Triggers>
                <Trigger Property="Orientation" Value="Vertical">
                    <Setter Property="Template" Value="{DynamicResource SliderVertical}" />
                </Trigger>
            </Style.Triggers>
        </Style>
    </Window.Resources>
    <Window.Title>
        <MultiBinding Converter="{StaticResource TitleConverter}">
            <Binding Path="ActiveProject"/>
            <Binding Path="ActiveProject.HasUnsavedChanges"/>
            <Binding Path="ActiveProject.ProjectFilePath"/>
        </MultiBinding>
    </Window.Title>
    <Grid>
        <Menu VerticalAlignment="Top" Background="{DynamicResource ABrush.Tone4.Border.Static}" BorderBrush="{DynamicResource ABrush.Tone6.Border.Static}" BorderThickness="0 0 0 1">
            <MenuItem Header="File">
                <MenuItem Header="New Project" Command="{Binding NewProjectCommand, Mode=OneTime}"/>
                <MenuItem Header="Open Project" Command="{Binding OpenProjectCommand, Mode=OneTime}"/>
                <MenuItem Header="Save Project" Command="{Binding ActiveProject.SaveCommand}" IsEnabled="{Binding ActiveProject, Converter={StaticResource NullToDisabledConverter}}"/>
                <MenuItem Header="Save Project As..." Command="{Binding ActiveProject.SaveAsCommand}" IsEnabled="{Binding ActiveProject, Converter={StaticResource NullToDisabledConverter}}"/>
            </MenuItem>
            <MenuItem Header="test notification" Click="MenuItem_OnClick"/>
        </Menu>
        <Grid Margin="0,19,0,0" IsEnabled="{Binding IsExporting, Converter={StaticResource InvertBoolConverter}}">
            <Grid.RowDefinitions>
                <RowDefinition Height="70*"/>
                <RowDefinition Height="5"/>
                <RowDefinition Height="75*"/>
            </Grid.RowDefinitions>
            <GridSplitter VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Grid.Row="1" Background="{DynamicResource WindowBackground}" BorderBrush="{DynamicResource ABrush.Tone6.Border.Static}" BorderThickness="0 1 0 1" SnapsToDevicePixels="True"/>
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="10*"/>
                    <ColumnDefinition Width="5"/>
                    <ColumnDefinition Width="7*"/>
                </Grid.ColumnDefinitions>
                <GridSplitter ResizeDirection="Columns" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" BorderThickness="1 0 1 0" Background="{DynamicResource WindowBackground}" BorderBrush="{DynamicResource ABrush.Tone6.Border.Static}" Grid.Column="1" Margin="0,-1" SnapsToDevicePixels="True"/>
                <Grid Grid.Column="2" DataContext="{Binding Playback}">
                    <Border Background="{DynamicResource ABrush.Tone3.Background.Static}" VerticalAlignment="Bottom" Height="35" BorderBrush="{DynamicResource ABrush.Tone6.Border.Static}" BorderThickness="0 1 0 0">
                        <Grid>
                            <Button Content="Fit to Scale" Width="75" HorizontalAlignment="Left" Padding="1,0,0,0" Margin="5,5,0,5" Click="OnFitContentToWindowClick"/>
                            <CheckBox IsChecked="{Binding ElementName=VPViewBox, Path=PanToCursorOnUserZoom}" Content="Zoom to cursor" Width="110" HorizontalAlignment="Left" Padding="1,0,0,0" Margin="85,5,0,5"/>
                            <StackPanel Margin="0,5" Orientation="Horizontal" HorizontalAlignment="Center">
                                <Button Content="Play/Pause" Width="70" HorizontalAlignment="Left" Padding="1,0,0,0" Command="{Binding TogglePlayCommand, Mode=OneTime}"/>
                                <Button Width="26" HorizontalAlignment="Left" Padding="1,0,0,0" Command="{Binding PlayCommand, Mode=OneTime}" Margin="5,0,0,0">
                                    <Polygon Width="16" Height="16" Points="0,16 0,0 16,8" Fill="{DynamicResource ABrush.ColourfulGlyph.Static}"/>
                                </Button>
                                <Button Width="26" HorizontalAlignment="Left" Command="{Binding PauseCommand, Mode=OneTime}" Margin="5,0,0,0">
                                    <Grid Width="14" Height="16">
                                        <Rectangle Width="4" HorizontalAlignment="Left" Fill="{DynamicResource ABrush.ColourfulGlyph.Static}"/>
                                        <Rectangle Width="4" HorizontalAlignment="Right" Fill="{DynamicResource ABrush.ColourfulGlyph.Static}"/>
                                    </Grid>
                                </Button>
                            </StackPanel>
                            <Button Content="Settings" Width="75" HorizontalAlignment="Right" Padding="3,0,2,0" DataContext="{Binding Editor.ActiveProject}" Command="{Binding OpenSettingsCommand, Mode=OneTime}" Margin="0,5,5,5"/>
                        </Grid>
                    </Border>
                    <cc:FreeMoveViewPortV2 DataContext="{Binding Editor.ActiveProject}" x:Name="VPViewBox" Margin="0,0,0,35" ClipToBounds="True" Background="{DynamicResource ABrush.Tone1.Background.Static}">
                        <wpf:SKElement Width="{Binding Settings.Width, FallbackValue=0}" Height="{Binding Settings.Height, FallbackValue=0}"
                                       x:Name="ViewPortElement" PaintSurface="OnPaintViewPortSurface"/>
                    </cc:FreeMoveViewPortV2>
                </Grid>
                <Border DataContext="{Binding ActiveProject, UpdateSourceTrigger=PropertyChanged}" IsEnabled="{Binding ., Converter={StaticResource NullToDisabledConverter}, Mode=TwoWay}" Background="{DynamicResource ABrush.Tone2.Background.Static}">
                    <TabControl BorderThickness="1 1 0 0" Margin="-1,-1,0,0" BorderBrush="{DynamicResource ABrush.Tone6.Border.Static}">
                        <TabItem Header="Files and Resources" DataContext="{Binding ResourceManager}">
                            <TabItem.Resources>
                                <editor:ResourceItemContainerStyleSelector x:Key="ResourceItemContainerStyleSelector">
                                    <editor:ResourceItemContainerStyleSelector.ResourceItemStyle>
                                        <!-- d:DataContext="{d:DesignInstance vm1:ResourceItemViewModel}" -->
                                        <Style TargetType="{x:Type ui:ResourceItemControl}" BasedOn="{StaticResource {x:Type ui:BaseResourceItemControl}}">
                                            <Setter Property="HeaderText" Value="{Binding UniqueId, Mode=OneWay}"/>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding IsOnline}" Value="False">
                                                    <Setter Property="Background" Value="DarkRed"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </editor:ResourceItemContainerStyleSelector.ResourceItemStyle>
                                    <editor:ResourceItemContainerStyleSelector.ResourceGroupStyle>
                                        <!-- d:DataContext="{d:DesignInstance vm1:ResourceGroupViewModel}" -->
                                        <Style TargetType="{x:Type ui:ResourceGroupControl}" BasedOn="{StaticResource {x:Type ui:BaseResourceItemControl}}">
                                            <Setter Property="HeaderText" Value="{Binding DisplayName, Mode=OneWay}"/>
                                        </Style>
                                    </editor:ResourceItemContainerStyleSelector.ResourceGroupStyle>
                                </editor:ResourceItemContainerStyleSelector>
                                <editor:ResourceItemContainerDataTemplateSelector x:Key="ResourceItemContainerDataTemplateSelector">
                                    <editor:ResourceItemContainerDataTemplateSelector.ResourceItemTemplate>
                                        <DataTemplate DataType="{x:Type vm1:ResourceItemViewModel}">
                                            <TextBlock Text="{Binding Path=UniqueId, Mode=OneWay}" HorizontalAlignment="Center" VerticalAlignment="Center" ToolTip="{Binding DisplayName, Mode=OneWay}"/>
                                        </DataTemplate>
                                    </editor:ResourceItemContainerDataTemplateSelector.ResourceItemTemplate>
                                    <editor:ResourceItemContainerDataTemplateSelector.ResourceItemColourTemplate>
                                        <DataTemplate DataType="{x:Type rc:ResourceColourViewModel}">
                                            <Border Background="{Binding Colour, Converter={x:Static converters:SKColorToBrushConverter.Instance}}"/>
                                        </DataTemplate>
                                    </editor:ResourceItemContainerDataTemplateSelector.ResourceItemColourTemplate>
                                    <editor:ResourceItemContainerDataTemplateSelector.ResourceGroupTemplate>
                                        <DataTemplate DataType="{x:Type vm1:ResourceGroupViewModel}">
                                            <TextBlock Text="{Binding Path=Items.Count, Mode=OneWay, StringFormat='({0} Items)'}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                        </DataTemplate>
                                    </editor:ResourceItemContainerDataTemplateSelector.ResourceGroupTemplate>
                                </editor:ResourceItemContainerDataTemplateSelector>
                            </TabItem.Resources>
                            <Grid s:UIFocusGroup.FocusGroupPath="Application/Editor/Resources" acs:AdvancedContextMenu.ContextGenerator="{x:Static rm:ResourceContextGenerator.Instance}">
                                <ui:ResourceListControl FileDropNotifier="{Binding .}" Background="{DynamicResource ABrush.Tone3.Background.Static}"
                                                        ItemsSource="{Binding CurrentGroup.Items}" BorderThickness="0"
                                                        helpers:SelectorHelper.SelectedItems="{Binding CurrentGroup.SelectedItems}"
                                                        helpers:SelectorHelper.UpdateSelectedItemsOnChange="True"
                                                        ItemContainerStyleSelector="{StaticResource ResourceItemContainerStyleSelector}"
                                                        ItemTemplateSelector="{StaticResource ResourceItemContainerDataTemplateSelector}"
                                                        HorizontalContentAlignment="Stretch"
                                                        VerticalContentAlignment="Stretch">
                                    <ui:ResourceListControl.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <WrapPanel IsItemsHost="True" Orientation="Horizontal"/>
                                        </ItemsPanelTemplate>
                                    </ui:ResourceListControl.ItemsPanel>
                                </ui:ResourceListControl>
                            </Grid>
                        </TabItem>
                        <TabItem Header="Clip Properties">
                            <!--
                            <Grid Grid.IsSharedSizeScope="True">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="150" SharedSizeGroup="SharedColumn0"/>
                                    <ColumnDefinition Width="*" SharedSizeGroup="SharedColumn1"/>
                                </Grid.ColumnDefinitions>
                                <ItemsControl x:Name="ClipPropertyPanelList" Grid.ColumnSpan="2" HorizontalContentAlignment="Stretch" HorizontalAlignment="Stretch">
                                </ItemsControl>
                            </Grid>
                            -->

                            <ScrollViewer HorizontalScrollBarVisibility="Auto" 
                                          VerticalScrollBarVisibility="Auto" CanContentScroll="False" 
                                          helpers:ScrollViewerHelper.UseHorizontalScrollWheel="True" 
                                          Background="{DynamicResource ABrush.Tone2.Background.Static}">
                                <ItemsControl x:Name="ClipPropertyPanelList" HorizontalContentAlignment="Stretch" HorizontalAlignment="Stretch">
                                </ItemsControl>
                            </ScrollViewer>

                            <!-- 
                                Maybe create some sort of base user control called "PropertyPage" which maps to a specific class/type of clip,
                                then when a selected item changes, iterate through the type hierarchy and generate the pages accordingly?
                            -->
                            <!-- d:DataContext="{d:DesignInstance sources:LoopbackSourceViewModel}" -->
                            <!--
                            <Grid x:Name="SettingsPanel" Background="{DynamicResource ABrush.Tone2.Background.Static}">
                                <ScrollViewer VerticalScrollBarVisibility="Auto">
                                    <ContentPresenter Content="{Binding}">
                                        <ContentPresenter.Resources>
                                            <DataTemplate DataType="{x:Type clips1:ImageClipViewModel}">
                                            </DataTemplate>
                                            <DataTemplate DataType="{x:Type clips1:SquareClipViewModel}">
                                            </DataTemplate>
                                            <DataTemplate DataType="{x:Type clips1:VideoClipViewModel}">
                                            </DataTemplate>
                                        </ContentPresenter.Resources>
                                    </ContentPresenter>
                                </ScrollViewer>
                            </Grid>
                            -->
                        </TabItem>
                        <TabItem Header="Debug stuff">
                            <Grid>
                                <Canvas/>
                            </Grid>
                        </TabItem>
                    </TabControl>
                </Border>
            </Grid>
            <Grid Grid.Row="2">
                <Border VerticalAlignment="Bottom" Height="20" BorderBrush="{DynamicResource ABrush.Tone4.Border.Static}" BorderThickness="0 1 0 0">
                    <!-- Status bar -->
                    <Border Background="{DynamicResource ABrush.Tone4.Border.Static}" Margin="0,-1,0,0">
                        <StackPanel Orientation="Horizontal">
                            <TextBlock VerticalAlignment="Center" x:Name="NotificationBarTextBlock" Padding="3,0"/>
                        </StackPanel>
                    </Border>
                </Border>
                <Border DataContext="{Binding ActiveProject, UpdateSourceTrigger=PropertyChanged}"
                        IsEnabled="{Binding ., Converter={StaticResource NullToDisabledConverter}, Mode=TwoWay}" Margin="0,0,0,20"
                        s:UIFocusGroup.FocusGroupPath="Application/Editor/Timeline">
                    <Border.InputBindings>
                        <sb:ShortcutCommandBinding ShortcutAndUsageId="Application/Editor/Timeline/LayerControllers/DeleteSelectedLayer" Command="{Binding Timeline.RemoveSelectedLayersCommand}"/>
                        <sb:ShortcutCommandBinding ShortcutAndUsageId="Application/Editor/Timeline/Surface/PlayPauseAction" Command="{Binding Editor.Playback.TogglePlayCommand}"/>
                    </Border.InputBindings>
                    <Grid DataContext="{Binding Timeline}">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="40"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="5*"/>
                            <ColumnDefinition Width="5"/>
                            <ColumnDefinition Width="20*"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="PART_TimestampBoard" Background="{DynamicResource ABrush.Tone4.Background.Static}" BorderThickness="0 0 0 1" BorderBrush="{DynamicResource ABrush.Tone6.Border.Static}">
                            <DockPanel>
                                <TextBlock FontSize="16" Text="{Binding PlayHeadFrame, Mode=OneWay}" VerticalAlignment="Center" HorizontalAlignment="Left" Margin="10 0 0 0"/>
                                <TextBlock FontSize="16" Text="{Binding MaxDuration, Mode=OneWay}" VerticalAlignment="Center" HorizontalAlignment="Right" Margin="0 0 10 0" DockPanel.Dock="Right"/>
                                <TextBlock FontSize="16" Text="{Binding ElementName=TheTimeline, Path=UnitZoom}" VerticalAlignment="Center" HorizontalAlignment="Right" Margin="0 0 10 0" DockPanel.Dock="Right"/>
                            </DockPanel>
                        </Border>
                        <Border s:UIFocusGroup.FocusGroupPath="Application/Editor/Timeline/LayerControllers"
                                Grid.Row="1" Grid.Column="0" BorderThickness="0 0 0 0"
                                Background="{DynamicResource ABrush.Tone3.Background.Static}"
                                BorderBrush="{DynamicResource ABrush.Tone6.Border.Static}" />
                        <ListBox x:Name="LayerListBox" s:UIFocusGroup.FocusGroupPath="Application/Editor/Timeline/LayerControllers"
                                 Grid.Row="1" Grid.Column="0"
                                 SelectionMode="Extended"
                                 ItemsSource="{Binding Layers, Mode=OneTime}"
                                 SelectedItem="{Binding PrimarySelectedLayer, UpdateSourceTrigger=PropertyChanged}"
                                 helpers:SelectorHelper.SelectedItems="{Binding SelectedLayers}"
                                 helpers:SelectorHelper.UpdateSelectedItemsOnChange="True"
                                 Background="Transparent" BorderBrush="Transparent"
                                 HorizontalContentAlignment="Stretch"
                                 ScrollViewer.HorizontalScrollBarVisibility="Visible"
                                 ScrollViewer.CanContentScroll="False"
                                 BorderThickness="0 0 0 0" Padding="0"
                                 ItemTemplateSelector="{StaticResource TimelineLayerListItemContainerSelector}">
                            <ListBox.Template>
                                <ControlTemplate TargetType="{x:Type ListBox}">
                                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="0" SnapsToDevicePixels="true">
                                        <ScrollViewer CanContentScroll="False" x:Name="PART_ScrollViewer" Focusable="false" Padding="{TemplateBinding Padding}" converters:VerticalScrollBinder.BindGroup="TimelineScrollGroup">
                                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="0"/>
                                        </ScrollViewer>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsEnabled" Value="false">
                                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ListBox.Disabled.Background}" />
                                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource ListBox.Disabled.Border}" />
                                        </Trigger>
                                        <MultiTrigger>
                                            <MultiTrigger.Conditions>
                                                <Condition Property="IsGrouping" Value="true" />
                                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                                            </MultiTrigger.Conditions>
                                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                                        </MultiTrigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </ListBox.Template>
                            <ListBox.ItemContainerStyle>
                                <Style TargetType="ListBoxItem" BasedOn="{StaticResource {x:Type ListBoxItem}}">
                                    <Setter Property="Height" Value="{Binding Height, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, FallbackValue=60}"/>
                                    <Setter Property="MinHeight" Value="{Binding MinHeight, UpdateSourceTrigger=PropertyChanged, FallbackValue=40}"/>
                                    <Setter Property="VerticalContentAlignment" Value="Stretch"/>
                                    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                                    <Setter Property="BorderThickness" Value="0"/>
                                    <Setter Property="BorderBrush" Value="{DynamicResource ABrush.Tone5.Border.Static}"/>
                                    <Setter Property="Padding" Value="0"/>
                                    <Setter Property="Margin" Value="0"/>
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                                <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true" BorderThickness="0 0 0 1">
                                                    <Grid d:DataContext="{d:DesignInstance timeline:LayerViewModel}">
                                                        <Rectangle Fill="{Binding LayerColour}" Margin="0" Width="18" VerticalAlignment="Stretch" HorizontalAlignment="Left"/>
                                                        <ContentPresenter HorizontalAlignment="Stretch" VerticalAlignment="Stretch" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="18,4,0,4" />
                                                        <Thumb DragDelta="OnBottomThumbDrag" Margin="0,0,0,0" VerticalAlignment="Bottom" Background="Transparent" BorderThickness="0" Height="4" Cursor="SizeNS"/>
                                                    </Grid>
                                                </Border>
                                                <ControlTemplate.Triggers>
                                                    <MultiTrigger>
                                                        <MultiTrigger.Conditions>
                                                            <Condition Property="IsMouseOver" Value="True" />
                                                        </MultiTrigger.Conditions>
                                                        <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ABrush.Tone5.Background.Static}" />
                                                    </MultiTrigger>
                                                    <MultiTrigger>
                                                        <MultiTrigger.Conditions>
                                                            <Condition Property="Selector.IsSelectionActive" Value="False" />
                                                            <Condition Property="IsSelected" Value="True" />
                                                        </MultiTrigger.Conditions>
                                                        <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ABrush.Tone5.Background.Static}" />
                                                    </MultiTrigger>
                                                    <MultiTrigger>
                                                        <MultiTrigger.Conditions>
                                                            <Condition Property="Selector.IsSelectionActive" Value="True" />
                                                            <Condition Property="IsSelected" Value="True" />
                                                        </MultiTrigger.Conditions>
                                                        <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ABrush.Tone5.Background.Static}" />
                                                    </MultiTrigger>
                                                    <Trigger Property="IsEnabled" Value="False">
                                                        <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource ABrush.Foreground.Disabled}" />
                                                    </Trigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </ListBox.ItemContainerStyle>
                        </ListBox>
                        <Border Visibility="Collapsed" BorderBrush="{DynamicResource ABrush.Tone6.Border.Static}" BorderThickness="0 0 0 1" Grid.Column="0" Height="1" VerticalAlignment="Bottom" Grid.Row="1"/>
                        <c:TimelineControl x:Name="TheTimeline"
                                           Background="{DynamicResource ABrush.Tone2.Background.Static}"
                                           ItemsSource="{Binding Layers, Mode=OneTime}"
                                           Grid.RowSpan="2" Grid.Column="2" BorderThickness="0"
                                           BorderBrush="{DynamicResource ABrush.Tone2.Border.Static}"
                                           MaxDuration="{Binding MaxDuration, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, FallbackValue=10000}"
                                           s:UIFocusGroup.FocusGroupPath="Application/Editor/Timeline/Surface">
                        </c:TimelineControl>
                        <GridSplitter Background="{DynamicResource WindowBackground}" ResizeDirection="Columns" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Grid.Column="1" BorderBrush="{DynamicResource ABrush.Tone6.Border.Static}" BorderThickness="1 0 1 0" Grid.RowSpan="2" Margin="0,-1,0,0" SnapsToDevicePixels="True"/>
                    </Grid>
                </Border>
            </Grid>
        </Grid>
        <Popup x:Name="NotificationPanelPopup" AllowsTransparency="True" d:DataContext="{d:DesignInstance n:NotificationPanelViewModel}">
            <Popup.Resources>
                <nn:NotificationDataTemplateSelector x:Key="NotificationTemplateSelector">
                    <nn:NotificationDataTemplateSelector.MessageNotificationTemplate>
                        <DataTemplate DataType="{x:Type types:MessageNotification}">
                            <Grid>
                                <Grid.InputBindings>
                                    <MouseBinding MouseAction="MiddleClick" Command="{Binding HideCommand, Mode=OneTime}"/>
                                </Grid.InputBindings>
                                <Border VerticalAlignment="Top" Height="24" Background="{DynamicResource ABrush.Tone7.Background.Static}" BorderBrush="{DynamicResource ABrush.Tone7.Border.Static}" BorderThickness="0,0,0,1">
                                    <Grid>
                                        <Label Content="{Binding Header, Mode=OneWay}" VerticalAlignment="Stretch" VerticalContentAlignment="Center" Margin="0,0,24,0"/>
                                        <Button Command="{Binding HideCommand, Mode=OneTime}" Background="Transparent" BorderBrush="Transparent" Content="X" FontSize="11" HorizontalAlignment="Right" VerticalAlignment="Stretch" Width="24" ToolTip="Close this notification. Alternatively, press the middle-mouse"/>
                                    </Grid>
                                </Border>
                                <Label Content="{Binding Message, Mode=OneWay}" Margin="0,24,0,0" VerticalContentAlignment="Top" VerticalAlignment="Top"/>
                            </Grid>
                        </DataTemplate>
                    </nn:NotificationDataTemplateSelector.MessageNotificationTemplate>
                    <nn:NotificationDataTemplateSelector.HistoryNotificationTemplate>
                        <DataTemplate DataType="{x:Type history:HistoryNotification}">
                            <Grid>
                                <Grid.InputBindings>
                                    <MouseBinding MouseAction="MiddleClick" Command="{Binding HideCommand, Mode=OneTime}"/>
                                </Grid.InputBindings>
                                <Border VerticalAlignment="Top" Height="24" Background="{DynamicResource ABrush.Tone7.Background.Static}" BorderBrush="{DynamicResource ABrush.Tone7.Border.Static}" BorderThickness="0,0,0,1">
                                    <Grid>
                                        <Label Content="History" VerticalAlignment="Stretch" VerticalContentAlignment="Center" Margin="0,0,24,0"/>
                                        <Button Command="{Binding HideCommand, Mode=OneTime}" Background="Transparent" BorderBrush="Transparent" Content="X" FontSize="11" HorizontalAlignment="Right" VerticalAlignment="Stretch" Width="24" ToolTip="Close this notification. Alternatively, press the middle-mouse"/>
                                    </Grid>
                                </Border>
                                <Label Content="{Binding Message, Mode=OneWay}" Margin="0,24,0,0" VerticalContentAlignment="Top" VerticalAlignment="Top"/>
                            </Grid>
                        </DataTemplate>
                    </nn:NotificationDataTemplateSelector.HistoryNotificationTemplate>
                    <nn:NotificationDataTemplateSelector.SavingProjectNotificationTemplate>
                        <DataTemplate DataType="{x:Type notifications:SavingProjectNotification}">
                            <Grid>
                                <Grid.InputBindings>
                                    <MouseBinding MouseAction="MiddleClick" Command="{Binding HideCommand, Mode=OneTime}"/>
                                </Grid.InputBindings>
                                <Border VerticalAlignment="Top" Height="24" Background="{DynamicResource ABrush.Tone7.Background.Static}" BorderBrush="{DynamicResource ABrush.Tone7.Border.Static}" BorderThickness="0,0,0,1">
                                    <Grid>
                                        <Label Content="Save Project" VerticalAlignment="Stretch" VerticalContentAlignment="Center" Margin="0,0,24,0"/>
                                        <Button Command="{Binding HideCommand, Mode=OneTime}" Background="Transparent" BorderBrush="Transparent" Content="X" FontSize="11" HorizontalAlignment="Right" VerticalAlignment="Stretch" Width="24" ToolTip="Close this notification. Alternatively, press the middle-mouse"/>
                                    </Grid>
                                </Border>
                                <Label Margin="0,24,0,0" VerticalContentAlignment="Top" VerticalAlignment="Top">
                                    <Label.Content>
                                        <MultiBinding Converter="{x:Static savingProject:SavingProjectMessageConverter.Instance}">
                                            <Binding Path="IsSaving"/>
                                            <Binding Path="IsSuccess"/>
                                            <Binding Path="ErrorMessage"/>
                                        </MultiBinding>
                                    </Label.Content>
                                </Label>
                            </Grid>
                        </DataTemplate>
                    </nn:NotificationDataTemplateSelector.SavingProjectNotificationTemplate>
                </nn:NotificationDataTemplateSelector>
            </Popup.Resources>
            <Border Background="Transparent">
                <ScrollViewer MaxHeight="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type editor:EditorMainWindow}}, Path=ActualHeight}"
                              VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto" CanContentScroll="False">
                    <nn:NotificationList ItemsSource="{Binding Notifications, Mode=OneTime}" ItemTemplateSelector="{StaticResource NotificationTemplateSelector}" MinWidth="300">
                        <nn:NotificationList.Style>
                            <Style TargetType="{x:Type nn:NotificationList}" BasedOn="{StaticResource {x:Type ItemsControl}}">
                                <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                                <Setter Property="VerticalContentAlignment" Value="Stretch"/>
                            </Style>
                        </nn:NotificationList.Style>
                        <ItemsControl.ItemContainerStyle>
                            <Style TargetType="{x:Type nn:NotificationControl}">
                                <Setter Property="Margin" Value="0,0,5,5"/>
                                <Setter Property="Background" Value="{DynamicResource ABrush.Tone6.Background.Static}"/>
                                <Setter Property="BorderBrush" Value="{DynamicResource ABrush.Tone6.Border.Static}"/>
                                <Setter Property="BorderThickness" Value="1"/>
                                <Setter Property="Padding" Value="0"/>
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type nn:NotificationControl}">
                                            <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                                                <ContentPresenter HorizontalAlignment="Stretch" VerticalAlignment="Stretch" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                            </Border>
                                            <ControlTemplate.Triggers>
                                                <MultiTrigger>
                                                    <MultiTrigger.Conditions>
                                                        <Condition Property="IsMouseOver" Value="True" />
                                                    </MultiTrigger.Conditions>
                                                    <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource ABrush.Tone8.Border.Static}" />
                                                </MultiTrigger>
                                                <Trigger Property="IsEnabled" Value="False">
                                                    <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource ABrush.Foreground.Disabled}" />
                                                </Trigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </ItemsControl.ItemContainerStyle>
                    </nn:NotificationList>
                </ScrollViewer>
            </Border>
        </Popup>
    </Grid>
</v:WindowEx>