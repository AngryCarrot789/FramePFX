<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:controls="clr-namespace:FramePFX.Editors.Controls.TreeViews.Controls">

    <Style x:Key="TreeItemExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Width" Value="16"/>
        <Setter Property="Height" Value="16"/>
        <Setter Property="Background" Value="{DynamicResource TreeViewItem.TreeArrow.Static.Fill}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource TreeViewItem.TreeArrow.Static.Stroke}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="Transparent" Height="16" Padding="1" Width="16">
                        <Grid>
                            <Rectangle x:Name="ExpandPath"
                                       Fill="{DynamicResource TreeViewItem.TreeArrow.Static.Fill}"
                                       Stroke="{DynamicResource TreeViewItem.TreeArrow.Static.Stroke}"
                                       StrokeDashArray="2,2"
                                       StrokeThickness="1" SnapsToDevicePixels="True"/>
                            <Label x:Name="ExpandText" FontSize="14" Margin="1,-2,0,0" Content="+" Padding="0" VerticalAlignment="Top" HorizontalAlignment="Center" Foreground="{DynamicResource ABrush.Foreground.Static}" FontFamily="Consolas"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Content" TargetName="ExpandText" Value="-"/>
                            <!--
                            <Setter Property="RenderTransform" TargetName="ExpandPath">
                                <Setter.Value>
                                    <RotateTransform Angle="180" CenterY="3" CenterX="3"/>
                                </Setter.Value>
                            </Setter>
                            -->
                            <Setter Property="Fill" TargetName="ExpandPath" Value="{DynamicResource TreeViewItem.TreeArrow.Static.Checked.Fill}"/>
                            <Setter Property="Stroke" TargetName="ExpandPath" Value="{DynamicResource TreeViewItem.TreeArrow.Static.Checked.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="ExpandPath" Value="{DynamicResource TreeViewItem.TreeArrow.MouseOver.Fill}"/>
                            <Setter Property="Stroke" TargetName="ExpandPath" Value="{DynamicResource TreeViewItem.TreeArrow.MouseOver.Stroke}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsChecked" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Fill" TargetName="ExpandPath" Value="{DynamicResource TreeViewItem.TreeArrow.MouseOver.Checked.Fill}"/>
                            <Setter Property="Stroke" TargetName="ExpandPath" Value="{DynamicResource TreeViewItem.TreeArrow.MouseOver.Checked.Stroke}"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type controls:MultiSelectTreeViewItem}">
        <Setter Property="KeyboardNavigation.IsTabStop" Value="False"/>
        <Setter Property="VirtualizingStackPanel.VirtualizationMode" Value="Recycling"/>
        <Setter Property="VirtualizingStackPanel.IsVirtualizing" Value="True"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ItemsControl, AncestorLevel=1}, FallbackValue=Left}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ItemsControl, AncestorLevel=1}, FallbackValue=Center}"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Margin" Value="0"/>
        <!-- Clear the default focus rectangle which would span the entire item in full width and with all visible children -->
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>

        <!-- Pass on the MultiSelectTreeView' HoverHighlighting value to each item because we couldn't access it otherwise in the triggers -->
        <Setter Property="HoverHighlighting" Value="{Binding HoverHighlighting, RelativeSource={RelativeSource AncestorType={x:Type controls:MultiSelectTreeView}}, Mode=OneWay, FallbackValue=False}"/>
        <Setter Property="ItemIndent" Value="{Binding ItemIndent, RelativeSource={RelativeSource AncestorType={x:Type controls:MultiSelectTreeView}}, Mode=OneWay, FallbackValue=13}"/>
        <Setter Property="IsKeyboardMode" Value="{Binding IsKeyboardMode, RelativeSource={RelativeSource AncestorType={x:Type controls:MultiSelectTreeView}}, Mode=OneWay, FallbackValue=False}"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:MultiSelectTreeViewItem}">
                    <!-- region ControlTemplate content -->
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="19" Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>

                        <Rectangle x:Name="HorLn" Stroke="{DynamicResource ABrush.Tone7.Border.Static}"
                                   SnapsToDevicePixels="True" Height="1" Margin="9,1,0,0"
                                   Visibility="Collapsed"/>

                        <Rectangle x:Name="VerLn" Stroke="{DynamicResource ABrush.Tone7.Border.Static}"
                                   Fill="{DynamicResource ABrush.Tone7.Border.Static}"
                                   SnapsToDevicePixels="true" Width="1" Margin="0" Grid.RowSpan="2"
                                   Visibility="Visible" Grid.Row="0"/>

                        <ToggleButton x:Name="Expander"
                                      IsChecked="{Binding RelativeSource={RelativeSource AncestorType={x:Type controls:MultiSelectTreeViewItem}}, Path=IsExpanded, FallbackValue=False}"
                                      ClickMode="Press"
                                      Style="{StaticResource TreeItemExpandCollapseToggleStyle}"/>
                        <Border Grid.Column="1" Grid.ColumnSpan="2" x:Name="headerBorder"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}"
                                Padding="{TemplateBinding Padding}"
                                SnapsToDevicePixels="true"
                                VerticalAlignment="Center" HorizontalAlignment="Stretch">
                            <ContentPresenter x:Name="PART_Header"
                                              FocusManager.IsFocusScope="True"
                                              Content="{TemplateBinding HeaderedContentControl.Header}"
                                              ContentTemplate="{TemplateBinding HeaderedContentControl.HeaderTemplate}"
                                              ContentStringFormat="{TemplateBinding HeaderedItemsControl.HeaderStringFormat}"
                                              ContentTemplateSelector="{TemplateBinding HeaderedItemsControl.HeaderTemplateSelector}"
                                              ContentSource="Header"
                                              HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                              Margin="0"/>
                        </Border>

                        <ContentPresenter Content="{TemplateBinding Remarks}" ContentTemplate="{TemplateBinding RemarksTemplate}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                        <!--
                            Place the above content presenter and border in this stack panel for small width headers
                            <StackPanel Orientation="Horizontal" Grid.Column="1" Grid.ColumnSpan="2" Margin="0,0,0,0">
                            </StackPanel>
                        -->
                        <ItemsPresenter x:Name="ItemsHost" Grid.ColumnSpan="2" Grid.Column="1" Grid.Row="1" Margin="0,0,0,0"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="False">
                            <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsVisible" Value="False">
                            <Setter Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="{DynamicResource TreeViewItem.Selected.Background}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource TreeViewItem.Selected.Border}"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource ABrush.AccentTone3.Border.Static}"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Value="False" Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type controls:MultiSelectTreeView}}, Path=IsKeyboardFocusWithin, FallbackValue=False}"/>
                                <Condition Value="False" Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type controls:MultiSelectTreeView}}, Path=ContextMenu.IsOpen, FallbackValue=False}"/>
                                <Condition Value="True" Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsSelected}"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource TreeViewItem.Selected.Inactive.Background}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource TreeViewItem.Selected.Inactive.Border}"/>
                        </MultiDataTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HoverHighlighting" Value="True"/>
                                <Condition Property="IsMouseOver" Value="True" SourceName="headerBorder"/>
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HoverHighlighting" Value="True"/>
                                <Condition Property="IsMouseOver" Value="True" SourceName="headerBorder"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" SourceName="headerBorder"/>
                                <Condition Property="IsLeftMousePressed" Value="True"/>
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                        <Trigger Property="UIElement.IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsEditing" Value="True">
                            <Setter Property="HeaderTemplate" Value="{Binding ContentTemplateEdit, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="Control.Background" Value="{DynamicResource TreeViewItem.MouseOver.Background}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsExpanded" Value="False"/>
                                <Condition Property="HasItems" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="VerLn" Value="Hidden"/>
                        </MultiTrigger>
                        <Trigger Property="ItemsControl.HasItems" Value="False">
                            <Setter Property="Visibility" TargetName="Expander" Value="Hidden"/>
                            <Setter Property="Visibility" TargetName="HorLn" Value="Visible"/>
                            <Setter Property="Grid.RowSpan" TargetName="VerLn" Value="2"/>
                            <Setter Property="Grid.Row" TargetName="VerLn" Value="0"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="True">
                            <Setter Property="Visibility" TargetName="Expander" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="HorLn" Value="Hidden"/>
                            <Setter Property="Grid.RowSpan" TargetName="VerLn" Value="1"/>
                            <Setter Property="Grid.Row" TargetName="VerLn" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="RemarksTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock VerticalAlignment="Center" Margin="3,0,0,0" Text="{Binding}">
                        <TextBlock.Style>
                            <Style TargetType="TextBlock">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding}" Value="{x:Null}">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding}" Value="">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ContentTemplateEdit">
            <Setter.Value>
                <DataTemplate>
                    <controls:EditTextBox Text="{Binding DisplayName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" BorderThickness="0" Padding="1"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>