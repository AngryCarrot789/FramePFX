<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controls="clr-namespace:FramePFX.Editors.Controls.TreeViews.Controls">

    <controls:ThicknessLeftConverter x:Key="ThicknessLeftConverter"/>
    <Style TargetType="{x:Type controls:MultiSelectTreeViewItem}">
        <Style.Triggers>
            <DataTrigger
                Binding="{Binding (VirtualizingStackPanel.IsVirtualizing), RelativeSource={RelativeSource AncestorType={x:Type controls:MultiSelectTreeView}}, FallbackValue=True}"
                Value="True">
                <Setter Property="ItemsControl.ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel IsItemsHost="True"/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>
        <Style.Resources>
            <ResourceDictionary/>
        </Style.Resources>

        <Setter Property="ContentTemplateEdit">
            <Setter.Value>
                <DataTemplate>
                    <controls:EditTextBox Text="{Binding DisplayName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" BorderThickness="0" Padding="1"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>

        <!-- Windows Classic Theme colours -->
        <Setter Property="BorderBrushSelected" Value="{x:Null}"/>
        <Setter Property="BackgroundSelected" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
        <Setter Property="ForegroundSelected" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
        <Setter Property="BorderBrushInactive" Value="{x:Null}"/>
        <Setter Property="BackgroundInactive" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
        <Setter Property="ForegroundInactive" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>

        <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        <Setter Property="KeyboardNavigation.IsTabStop" Value="False"/>
        <Setter Property="VirtualizingStackPanel.VirtualizationMode"
                Value="{Binding (VirtualizingStackPanel.VirtualizationMode), RelativeSource={RelativeSource AncestorType={x:Type controls:MultiSelectTreeView}}, FallbackValue=Standard}"/>
        <Setter Property="VirtualizingStackPanel.IsVirtualizing" Value="False"/>
        <Setter Property="Panel.Background" Value="#00FFFFFF"/>
        <Setter Property="Control.HorizontalContentAlignment"
                Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ItemsControl, AncestorLevel=1}, FallbackValue=Left}"/>
        <Setter Property="Control.VerticalContentAlignment"
                Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ItemsControl, AncestorLevel=1}, FallbackValue=Center}"/>
        <Setter Property="Control.Padding" Value="1"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Margin" Value="0"/>
        <!-- Clear the default focus rectangle which would span the entire item in full width and with all visible children -->
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>

        <!-- Pass on the MultiSelectTreeView' HoverHighlighting value to each item because we couldn't access it otherwise in the triggers -->
        <Setter Property="HoverHighlighting"
                Value="{Binding (controls:MultiSelectTreeView.HoverHighlighting), RelativeSource={RelativeSource AncestorType={x:Type controls:MultiSelectTreeView}}, Mode=OneWay, FallbackValue=False}"/>
        <Setter Property="ItemIndent"
                Value="{Binding (controls:MultiSelectTreeView.ItemIndent), RelativeSource={RelativeSource AncestorType={x:Type controls:MultiSelectTreeView}}, Mode=OneWay, FallbackValue=13}"/>
        <Setter Property="IsKeyboardMode"
                Value="{Binding (controls:MultiSelectTreeView.IsKeyboardMode), RelativeSource={RelativeSource AncestorType={x:Type controls:MultiSelectTreeView}}, Mode=OneWay, FallbackValue=False}"/>

        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:MultiSelectTreeViewItem}">
                    <StackPanel>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <!-- Set the second column width to * to have the items border expand to the right edge -->
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>

                            <ToggleButton
                                IsChecked="{Binding RelativeSource={RelativeSource AncestorType={x:Type controls:MultiSelectTreeViewItem}}, Path=IsExpanded, FallbackValue=False}"
                                ClickMode="Press" Name="Expander">
                                <ToggleButton.Style>
                                    <Style TargetType="{x:Type ToggleButton}">
                                        <Style.Resources>
                                            <ResourceDictionary/>
                                        </Style.Resources>
                                        <Setter Property="UIElement.Focusable" Value="False"/>
                                        <Setter Property="FrameworkElement.Width" Value="12"/>
                                        <Setter Property="FrameworkElement.Height" Value="16"/>
                                        <Setter Property="Control.Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                    <!-- Default expander 'plus' graphic -->
                                                    <Border Padding="1,2,0,0" Background="#00FFFFFF" Width="12" Height="16">
                                                        <Border
                                                            BorderThickness="1" CornerRadius="1" BorderBrush="#FF7898B5"
                                                            Width="9" Height="9"
                                                            SnapsToDevicePixels="True">
                                                            <Border.Background>
                                                                <LinearGradientBrush StartPoint="0,0" EndPoint="1,1">
                                                                    <LinearGradientBrush.GradientStops>
                                                                        <GradientStop Color="#FFFFFFFF" Offset="0.2"/>
                                                                        <GradientStop Color="#FFC0B7A6" Offset="1"/>
                                                                    </LinearGradientBrush.GradientStops>
                                                                </LinearGradientBrush>
                                                            </Border.Background>
                                                            <Path
                                                                Name="ExpandPath"
                                                                Data="M0,2L0,3 2,3 2,5 3,5 3,3 5,3 5,2 3,2 3,0 2,0 2,2z"
                                                                Fill="#FF000000"
                                                                Margin="1,1,1,1"/>
                                                        </Border>
                                                    </Border>
                                                    <ControlTemplate.Triggers>
                                                        <!-- Replace with 'minus' graphic the node is expanded -->
                                                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                                                            <Setter Property="Path.Data" TargetName="ExpandPath">
                                                                <Setter.Value>
                                                                    <StreamGeometry>M0,2L0,3 5,3 5,2z</StreamGeometry>
                                                                </Setter.Value>
                                                            </Setter>
                                                        </Trigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </ToggleButton.Style>
                            </ToggleButton>

                            <Grid Grid.Column="1" x:Name="ElementGrid">
                                <Border x:Name="headerBorder"
                                        BorderThickness="{TemplateBinding Border.BorderThickness}"
                                        Padding="{TemplateBinding Control.Padding}"
                                        Margin="0,0,0,-1"
                                        BorderBrush="{TemplateBinding Border.BorderBrush}"
                                        Background="{TemplateBinding Panel.Background}"
                                        SnapsToDevicePixels="True"
                                        VerticalAlignment="Center">
                                    <ContentPresenter Name="PART_Header"
                                                      FocusManager.IsFocusScope="True"
                                                      Content="{TemplateBinding HeaderedContentControl.Header}"
                                                      ContentTemplate="{TemplateBinding HeaderedContentControl.HeaderTemplate}"
                                                      ContentStringFormat="{TemplateBinding HeaderedItemsControl.HeaderStringFormat}"
                                                      ContentTemplateSelector="{TemplateBinding HeaderedItemsControl.HeaderTemplateSelector}"
                                                      ContentSource="Header"
                                                      HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                                      VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                                      SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                                </Border>
                                <!-- Focus rectangle inside the item -->
                                <Rectangle StrokeDashArray="0.5 1.5" StrokeThickness="1" Stroke="Black" SnapsToDevicePixels="True" Margin="1,1,1,0"
                                           Visibility="Hidden" Name="FocusRectangle" IsHitTestVisible="False"/>
                            </Grid>
                        </Grid>
                        <Grid Name="ItemsHostGrid" Margin="{TemplateBinding ItemIndent, Converter={StaticResource ThicknessLeftConverter}}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>

                            <Path Data="M0,0 L0,1" Stretch="Uniform" Name="RulerPath"
                                  Stroke="#60000000" StrokeDashArray="0.5 2.5"
                                  SnapsToDevicePixels="True" Margin="0,0,1,0"/>

                            <ItemsPresenter Grid.Column="1" Name="ItemsHost"/>
                        </Grid>
                    </StackPanel>
                    <ControlTemplate.Triggers>

                        <!-- Set the visibility of the item -->
                        <Trigger Property="IsVisible" Value="False">
                            <Setter Property="FrameworkElement.Visibility" Value="Collapsed"/>
                        </Trigger>

                        <!-- Set the foreground, border and background when the item is selected -->
                        <Trigger Property="controls:MultiSelectTreeViewItem.IsSelected" Value="True">
                            <Setter Property="Control.Background"
                                    Value="{Binding BackgroundSelected, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="Border.BorderBrush"
                                    Value="{Binding BorderBrushSelected, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="TextElement.Foreground"
                                    Value="{Binding ForegroundSelected, RelativeSource={RelativeSource Self}}"/>
                        </Trigger>

                        <!-- Show the focus rectangle when the item is focused -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="controls:MultiSelectTreeViewItem.IsKeyboardMode" Value="True"/>
                                <Condition Property="controls:MultiSelectTreeViewItem.IsFocused" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="FocusRectangle" Property="Visibility" Value="Visible"/>
                        </MultiTrigger>

                        <!-- Make all selected items grey when the entire Window is inactive -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition
                                    Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}}, Path=IsActive, FallbackValue=False}"
                                    Value="False"/>
                                <Condition
                                    Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsSelected}"
                                    Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Border.BorderBrush"
                                    Value="{Binding BorderBrushInactive, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="Control.Background"
                                    Value="{Binding BackgroundInactive, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="TextElement.Foreground"
                                    Value="{Binding ForegroundInactive, RelativeSource={RelativeSource Self}}"/>
                        </MultiDataTrigger>

                        <!-- Make all selected items grey when none of this TreeView's items is focused (i.e. the TreeView is not focused) -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition
                                    Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type controls:MultiSelectTreeView}}, Path=IsKeyboardFocusWithin, FallbackValue=False}"
                                    Value="False"/>
                                <Condition
                                    Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type controls:MultiSelectTreeView}}, Path=ContextMenu.IsOpen, FallbackValue=False}"
                                    Value="False"/>
                                <Condition
                                    Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsSelected}"
                                    Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Border.BorderBrush"
                                    Value="{Binding BorderBrushInactive, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="Control.Background"
                                    Value="{Binding BackgroundInactive, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="TextElement.Foreground"
                                    Value="{Binding ForegroundInactive, RelativeSource={RelativeSource Self}}"/>
                        </MultiDataTrigger>

                        <!-- Collapse the child items host if the node is not expanded -->
                        <Trigger Property="controls:MultiSelectTreeViewItem.IsExpanded" Value="False">
                            <Setter Property="UIElement.Visibility" TargetName="ItemsHostGrid" Value="Collapsed"/>
                        </Trigger>

                        <!-- Hide the expander button if there are no child nodes -->
                        <Trigger Property="ItemsControl.HasItems" Value="False">
                            <Setter Property="UIElement.Visibility" TargetName="Expander" Value="Hidden"/>
                        </Trigger>

                        <!-- Use grey text colour when the item is not enabled -->
                        <Trigger Property="UIElement.IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>

                        <!-- Hide vertical rulers if disabled -->
                        <DataTrigger
                            Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type controls:MultiSelectTreeView}}, Path=VerticalRulers, FallbackValue=False}"
                            Value="False">
                            <Setter TargetName="RulerPath" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>

                        <!-- Use a different template and colours in edit mode -->
                        <Trigger Property="controls:MultiSelectTreeViewItem.IsEditing" Value="True">
                            <Setter Property="HeaderTemplate"
                                    Value="{Binding ContentTemplateEdit, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="Control.Background"
                                    Value="{Binding BackgroundSelected, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="Border.BorderBrush"
                                    Value="{Binding BorderBrushSelected, RelativeSource={RelativeSource Self}}"/>
                            <Setter TargetName="FocusRectangle" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>